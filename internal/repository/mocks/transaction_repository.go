// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	domain "kreditplus/internal/domain"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: transaction
func (_m *TransactionRepository) CreateTransaction(transaction *domain.Transaction) error {
	ret := _m.Called(transaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Transaction) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransactionWithTx provides a mock function with given fields: tx, transaction
func (_m *TransactionRepository) CreateTransactionWithTx(tx *gorm.DB, transaction *domain.Transaction) error {
	ret := _m.Called(tx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransactionWithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *domain.Transaction) error); ok {
		r0 = rf(tx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransactionWithTx provides a mock function with given fields: tx, transaction
func (_m *TransactionRepository) DeleteTransactionWithTx(tx *gorm.DB, transaction *domain.Transaction) error {
	ret := _m.Called(tx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTransactionWithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *domain.Transaction) error); ok {
		r0 = rf(tx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTransactions provides a mock function with given fields: transaction, offset
func (_m *TransactionRepository) GetAllTransactions(transaction int, offset int) ([]domain.Transaction, error) {
	ret := _m.Called(transaction, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTransactions")
	}

	var r0 []domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]domain.Transaction, error)); ok {
		return rf(transaction, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []domain.Transaction); ok {
		r0 = rf(transaction, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(transaction, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: id
func (_m *TransactionRepository) GetTransactionByID(id uint) (*domain.Transaction, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Transaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransactionWithTx provides a mock function with given fields: tx, transaction
func (_m *TransactionRepository) UpdateTransactionWithTx(tx *gorm.DB, transaction *domain.Transaction) error {
	ret := _m.Called(tx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransactionWithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, *domain.Transaction) error); ok {
		r0 = rf(tx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTransaction provides a mock function with given fields: fn
func (_m *TransactionRepository) WithTransaction(fn func(*gorm.DB) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*gorm.DB) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
